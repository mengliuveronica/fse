{"ast":null,"code":"var _jsxFileName = \"/Users/liumeng/Documents/flask_survey/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [{\n  'id': 'q1',\n  'text': 'What is your opinion?',\n  'type': 'likert',\n  'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree']\n}, {\n  'id': 'q2',\n  'text': 'Please explain:',\n  'type': 'text'\n}];\nfunction App() {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [currentVignetteIndex, setCurrentVignetteIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    assignCondition();\n  }, []);\n  const assignCondition = async () => {\n    try {\n      console.log('Starting assignCondition');\n      // Get the current block\n      let {\n        data: blocks,\n        error\n      } = await supabase.from('blocks').select('*').order('created_at', {\n        ascending: false\n      }).limit(1);\n      console.log('Blocks query result:', blocks);\n      if (error) throw error;\n      let currentBlock = blocks && blocks[0];\n      if (!currentBlock || currentBlock.current_index >= conditions.length) {\n        // Create a new block if needed\n        const newBlock = shuffleArray([...conditions]);\n        const {\n          data,\n          error: insertError\n        } = await supabase.from('blocks').insert({\n          conditions: newBlock,\n          current_index: 0\n        }).select();\n        if (insertError) throw insertError;\n        currentBlock = data[0];\n      }\n\n      // Get the next condition and update the index\n      const condition = currentBlock.conditions[currentBlock.current_index];\n      const {\n        error: updateError\n      } = await supabase.from('blocks').update({\n        current_index: currentBlock.current_index + 1\n      }).eq('id', currentBlock.id);\n      if (updateError) throw updateError;\n\n      // Record the assignment\n      const {\n        error: insertAssignmentError\n      } = await supabase.from('condition_assignments').insert({\n        condition\n      });\n      if (insertAssignmentError) throw insertAssignmentError;\n      console.log('Setting survey with condition:', condition);\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n    } catch (error) {\n      console.error('Error in assignCondition:', error);\n      // Fallback to random assignment if there's an error\n      const condition = conditions[Math.floor(Math.random() * conditions.length)];\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n    }\n  };\n  const handleResponse = (questionId, response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentVignetteIndex]: {\n        ...prev[currentVignetteIndex],\n        [questionId]: response\n      }\n    }));\n  };\n  const nextVignette = () => {\n    if (currentVignetteIndex < survey.vignettes.length - 1) {\n      setCurrentVignetteIndex(currentVignetteIndex + 1);\n    } else {\n      setIsComplete(true);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          respondent_id: localStorage.getItem('respondent_id'),\n          // Assuming you stored it in localStorage\n          responses: answers\n        })\n      });\n      // Handle the response...\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  if (!survey) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), !isComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: survey.vignettes[currentVignetteIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), survey.questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this), question.type === 'likert' ? question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleResponse(question.id, option),\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: e => handleResponse(question.id, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextVignette,\n        children: currentVignetteIndex < survey.vignettes.length - 1 ? 'Next' : 'Finish'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for completing the survey. Click submit to record your responses.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dJ0R43WNEAXhkOzDKzgEBnueis0=\");\n_c = App;\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","conditions","vignettes","questions","App","_s","survey","setSurvey","currentVignetteIndex","setCurrentVignetteIndex","responses","setResponses","isComplete","setIsComplete","assignCondition","console","log","data","blocks","error","from","select","order","ascending","limit","currentBlock","current_index","length","newBlock","shuffleArray","insertError","insert","condition","updateError","update","eq","id","insertAssignmentError","Math","floor","random","handleResponse","questionId","response","prev","nextVignette","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","respondent_id","localStorage","getItem","answers","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","question","text","type","options","option","onClick","onChange","e","target","value","_c","array","i","j","$RefreshReg$"],"sources":["/Users/liumeng/Documents/flask_survey/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [\n  {'id': 'q1', 'text': 'What is your opinion?', 'type': 'likert', 'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree']},\n  {'id': 'q2', 'text': 'Please explain:', 'type': 'text'}\n];\n\nfunction App() {\n  const [survey, setSurvey] = useState(null);\n  const [currentVignetteIndex, setCurrentVignetteIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n\n  useEffect(() => {\n    assignCondition();\n  }, []);\n\n  const assignCondition = async () => {\n    try {\n      console.log('Starting assignCondition');\n      // Get the current block\n      let { data: blocks, error } = await supabase\n        .from('blocks')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(1);\n\n      console.log('Blocks query result:', blocks);\n\n      if (error) throw error;\n\n      let currentBlock = blocks && blocks[0];\n\n      if (!currentBlock || currentBlock.current_index >= conditions.length) {\n        // Create a new block if needed\n        const newBlock = shuffleArray([...conditions]);\n        const { data, error: insertError } = await supabase\n          .from('blocks')\n          .insert({ conditions: newBlock, current_index: 0 })\n          .select();\n\n        if (insertError) throw insertError;\n\n        currentBlock = data[0];\n      }\n\n      // Get the next condition and update the index\n      const condition = currentBlock.conditions[currentBlock.current_index];\n      const { error: updateError } = await supabase\n        .from('blocks')\n        .update({ current_index: currentBlock.current_index + 1 })\n        .eq('id', currentBlock.id);\n\n      if (updateError) throw updateError;\n\n      // Record the assignment\n      const { error: insertAssignmentError } = await supabase\n        .from('condition_assignments')\n        .insert({ condition });\n\n      if (insertAssignmentError) throw insertAssignmentError;\n\n      console.log('Setting survey with condition:', condition);\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n    } catch (error) {\n      console.error('Error in assignCondition:', error);\n      // Fallback to random assignment if there's an error\n      const condition = conditions[Math.floor(Math.random() * conditions.length)];\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n    }\n  };\n\n  const handleResponse = (questionId, response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentVignetteIndex]: { ...prev[currentVignetteIndex], [questionId]: response }\n    }));\n  };\n\n  const nextVignette = () => {\n    if (currentVignetteIndex < survey.vignettes.length - 1) {\n      setCurrentVignetteIndex(currentVignetteIndex + 1);\n    } else {\n      setIsComplete(true);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          respondent_id: localStorage.getItem('respondent_id'), // Assuming you stored it in localStorage\n          responses: answers\n        }),\n      });\n      // Handle the response...\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  if (!survey) return <div>Loading...</div>;\n\n  return (\n    <div className=\"App\">\n      <h1>Survey</h1>\n      {!isComplete ? (\n        <div>\n          <p>{survey.vignettes[currentVignetteIndex]}</p>\n          {survey.questions.map(question => (\n            <div key={question.id}>\n              <p>{question.text}</p>\n              {question.type === 'likert' ? (\n                question.options.map(option => (\n                  <button key={option} onClick={() => handleResponse(question.id, option)}>{option}</button>\n                ))\n              ) : (\n                <textarea onChange={(e) => handleResponse(question.id, e.target.value)} />\n              )}\n            </div>\n          ))}\n          <button onClick={nextVignette}>\n            {currentVignetteIndex < survey.vignettes.length - 1 ? 'Next' : 'Finish'}\n          </button>\n        </div>\n      ) : (\n        <div>\n          <p>Thank you for completing the survey. Click submit to record your responses.</p>\n          <button onClick={handleSubmit}>Submit Survey</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}