{"ast":null,"code":"var _jsxFileName = \"/Users/liumeng/Documents/flask_survey/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [{\n  'id': 'q1',\n  'text': 'What is your opinion?',\n  'type': 'likert',\n  'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree']\n}, {\n  'id': 'q2',\n  'text': 'Please explain:',\n  'type': 'text'\n}];\nconst MIN_COMPLETED_PER_CONDITION = 10; // Set your desired minimum here\n\nfunction App() {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [currentVignetteIndex, setCurrentVignetteIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [isStarted, setIsStarted] = useState(false);\n  const assignCondition = async () => {\n    try {\n      // Get counts of started and completed surveys for each condition\n      const {\n        data: counts,\n        error: countError\n      } = await supabase.from('survey_responses').select('condition, submitted');\n      if (countError) throw countError;\n      const completedCounts = {};\n      const startedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n        startedCounts[condition] = counts.filter(c => c.condition === condition).length;\n      });\n      console.log('Completed surveys per condition:', completedCounts);\n      console.log('Started surveys per condition:', startedCounts);\n\n      // Find conditions that haven't met the minimum\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n      let condition;\n      if (eligibleConditions.length > 0) {\n        // Randomly select from eligible conditions\n        condition = eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)];\n        console.log('Selected from eligible conditions:', condition);\n      } else {\n        // If all conditions met minimum, select the one with least completed\n        condition = Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n        console.log('All conditions met minimum. Selected condition with least completed:', condition);\n      }\n\n      // Insert the new survey response\n      const {\n        data: surveyData,\n        error: surveyError\n      } = await supabase.from('survey_responses').insert({\n        condition: condition,\n        submitted: false\n      }).select().single();\n      if (surveyError) throw surveyError;\n      console.log('New survey assigned to condition:', condition);\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n      setIsStarted(true);\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n  const handleResponse = (questionId, response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentVignetteIndex]: {\n        ...prev[currentVignetteIndex],\n        [questionId]: response\n      }\n    }));\n  };\n  const nextVignette = () => {\n    if (currentVignetteIndex < survey.vignettes.length - 1) {\n      setCurrentVignetteIndex(currentVignetteIndex + 1);\n    } else {\n      setIsComplete(true);\n    }\n  };\n  const handleSubmit = async () => {\n    try {\n      const {\n        error\n      } = await supabase.from('survey_responses').update({\n        responses: responses,\n        submitted: true\n      }).eq('id', surveyId);\n      if (error) throw error;\n      console.log('Survey submitted successfully. Condition:', survey.condition);\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      alert('Error submitting survey. Please try again.');\n    }\n  };\n  if (!isStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button below to start the survey.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: assignCondition,\n        children: \"Start Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n  if (!survey) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 23\n  }, this);\n  if (isSubmitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Survey Submitted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for completing the survey. Your responses have been recorded.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), !isComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: survey.vignettes[currentVignetteIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), survey.questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this), question.type === 'likert' ? question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleResponse(question.id, option),\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: e => handleResponse(question.id, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextVignette,\n        children: currentVignetteIndex < survey.vignettes.length - 1 ? 'Next' : 'Finish'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for completing the survey. Click submit to record your responses.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R2eS7I1oR2S6dSDhIeu35PAC+Cg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","conditions","vignettes","questions","MIN_COMPLETED_PER_CONDITION","App","_s","survey","setSurvey","currentVignetteIndex","setCurrentVignetteIndex","responses","setResponses","isComplete","setIsComplete","isSubmitted","setIsSubmitted","surveyId","setSurveyId","isStarted","setIsStarted","assignCondition","data","counts","error","countError","from","select","completedCounts","startedCounts","forEach","condition","filter","c","submitted","length","console","log","eligibleConditions","Math","floor","random","Object","keys","reduce","a","b","surveyData","surveyError","insert","single","id","alert","handleResponse","questionId","response","prev","nextVignette","handleSubmit","update","eq","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","question","text","type","options","option","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/liumeng/Documents/flask_survey/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [\n  {'id': 'q1', 'text': 'What is your opinion?', 'type': 'likert', 'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree']},\n  {'id': 'q2', 'text': 'Please explain:', 'type': 'text'}\n];\n\nconst MIN_COMPLETED_PER_CONDITION = 10; // Set your desired minimum here\n\nfunction App() {\n  const [survey, setSurvey] = useState(null);\n  const [currentVignetteIndex, setCurrentVignetteIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const assignCondition = async () => {\n    try {\n      // Get counts of started and completed surveys for each condition\n      const { data: counts, error: countError } = await supabase\n        .from('survey_responses')\n        .select('condition, submitted');\n\n      if (countError) throw countError;\n\n      const completedCounts = {};\n      const startedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n        startedCounts[condition] = counts.filter(c => c.condition === condition).length;\n      });\n\n      console.log('Completed surveys per condition:', completedCounts);\n      console.log('Started surveys per condition:', startedCounts);\n\n      // Find conditions that haven't met the minimum\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n\n      let condition;\n      if (eligibleConditions.length > 0) {\n        // Randomly select from eligible conditions\n        condition = eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)];\n        console.log('Selected from eligible conditions:', condition);\n      } else {\n        // If all conditions met minimum, select the one with least completed\n        condition = Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n        console.log('All conditions met minimum. Selected condition with least completed:', condition);\n      }\n\n      // Insert the new survey response\n      const { data: surveyData, error: surveyError } = await supabase\n        .from('survey_responses')\n        .insert({ condition: condition, submitted: false })\n        .select()\n        .single();\n\n      if (surveyError) throw surveyError;\n\n      console.log('New survey assigned to condition:', condition);\n\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n      setIsStarted(true);\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n\n  const handleResponse = (questionId, response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentVignetteIndex]: { ...prev[currentVignetteIndex], [questionId]: response }\n    }));\n  };\n\n  const nextVignette = () => {\n    if (currentVignetteIndex < survey.vignettes.length - 1) {\n      setCurrentVignetteIndex(currentVignetteIndex + 1);\n    } else {\n      setIsComplete(true);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const { error } = await supabase\n        .from('survey_responses')\n        .update({ \n          responses: responses,\n          submitted: true \n        })\n        .eq('id', surveyId);\n\n      if (error) throw error;\n\n      console.log('Survey submitted successfully. Condition:', survey.condition);\n\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      alert('Error submitting survey. Please try again.');\n    }\n  };\n\n  if (!isStarted) {\n    return (\n      <div className=\"App\">\n        <h1>Welcome to the Survey</h1>\n        <p>Click the button below to start the survey.</p>\n        <button onClick={assignCondition}>Start Survey</button>\n      </div>\n    );\n  }\n\n  if (!survey) return <div>Loading...</div>;\n\n  if (isSubmitted) {\n    return (\n      <div className=\"App\">\n        <h1>Survey Submitted</h1>\n        <p>Thank you for completing the survey. Your responses have been recorded.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Survey</h1>\n      {!isComplete ? (\n        <div>\n          <p>{survey.vignettes[currentVignetteIndex]}</p>\n          {survey.questions.map(question => (\n            <div key={question.id}>\n              <p>{question.text}</p>\n              {question.type === 'likert' ? (\n                question.options.map(option => (\n                  <button key={option} onClick={() => handleResponse(question.id, option)}>{option}</button>\n                ))\n              ) : (\n                <textarea onChange={(e) => handleResponse(question.id, e.target.value)} />\n              )}\n            </div>\n          ))}\n          <button onClick={nextVignette}>\n            {currentVignetteIndex < survey.vignettes.length - 1 ? 'Next' : 'Finish'}\n          </button>\n        </div>\n      ) : (\n        <div>\n          <p>Thank you for completing the survey. Click submit to record your responses.</p>\n          <button onClick={handleSubmit}>Submit Survey</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}