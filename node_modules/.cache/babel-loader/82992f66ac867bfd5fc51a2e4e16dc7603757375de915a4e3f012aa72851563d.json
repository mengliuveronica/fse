{"ast":null,"code":"import React,{useState,useEffect}from'react';import{createClient}from'@supabase/supabase-js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const supabaseUrl=process.env.REACT_APP_SUPABASE_URL;const supabaseKey=process.env.REACT_APP_SUPABASE_KEY;console.log('Supabase URL:',supabaseUrl);console.log('Supabase Key:',supabaseKey?'exists':'missing');let supabase;if(supabaseUrl&&supabaseKey){supabase=createClient(supabaseUrl,supabaseKey);console.log('Supabase client initialized');}else{console.error('Supabase URL or Key is missing. Please check your environment variables.');}const conditions=['A','B','C'];const vignettes={'A':['Vignette A1','Vignette A2','Vignette A3'],'B':['Vignette B1','Vignette B2','Vignette B3'],'C':['Vignette C1','Vignette C2','Vignette C3']};const questions=[{'id':'q1','text':'What is your opinion?','type':'likert','options':['Strongly Disagree','Disagree','Neutral','Agree','Strongly Agree'],'required':true},{'id':'q2','text':'Please explain:','type':'text','required':false}];const commonQuestions=[{'id':'common1','text':'What is your age?','type':'text','required':true},{'id':'common2','text':'What is your gender?','type':'radio','options':['Male','Female','Other','Prefer not to say'],'required':true}];const MIN_COMPLETED_PER_CONDITION=10;function App(){const[survey,setSurvey]=useState(null);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[responses,setResponses]=useState({});const[isComplete,setIsComplete]=useState(false);const[isSubmitted,setIsSubmitted]=useState(false);const[surveyId,setSurveyId]=useState(null);const[errors,setErrors]=useState({});useEffect(()=>{if(supabase){assignCondition();}else{console.error('Supabase client is not initialized. Cannot assign condition.');}},[]);const assignCondition=async()=>{if(!supabase){console.error('Supabase client is not initialized. Cannot assign condition.');return;}try{const{data:counts,error:countError}=await supabase.from('survey_responses').select('condition, submitted');if(countError)throw countError;const completedCounts={};conditions.forEach(condition=>{completedCounts[condition]=counts.filter(c=>c.condition===condition&&c.submitted).length;});console.log('Completed surveys per condition:',completedCounts);const eligibleConditions=conditions.filter(condition=>completedCounts[condition]<MIN_COMPLETED_PER_CONDITION);console.log('Eligible conditions:',eligibleConditions);let condition=eligibleConditions.length>0?eligibleConditions[Math.floor(Math.random()*eligibleConditions.length)]:Object.keys(completedCounts).reduce((a,b)=>completedCounts[a]<=completedCounts[b]?a:b);console.log('Assigned condition:',condition);const{data:surveyData,error:surveyError}=await supabase.from('survey_responses').insert({condition:condition,submitted:false}).select().single();if(surveyError)throw surveyError;console.log('Created survey response:',surveyData);setSurveyId(surveyData.id);setSurvey({condition,questions:[...commonQuestions,...vignettes[condition].flatMap(vignette=>questions.map(q=>({...q,text:`${vignette}\\n\\n${q.text}`})))]});console.log('Survey set up complete');}catch(error){console.error('Error assigning condition:',error);alert('Error starting survey. Please try again.');}};const handleResponse=response=>{console.log(`Response for question ${currentQuestionIndex}:`,response);setResponses(prev=>({...prev,[currentQuestionIndex]:response}));setErrors({});};const validateResponse=()=>{const currentQuestion=survey.questions[currentQuestionIndex];if(currentQuestion.required&&!responses[currentQuestionIndex]){console.log(`Validation failed for question ${currentQuestionIndex}`);setErrors({[currentQuestionIndex]:'This question is required'});return false;}return true;};const nextQuestion=()=>{if(validateResponse()){if(currentQuestionIndex<survey.questions.length-1){console.log(`Moving to question ${currentQuestionIndex+1}`);setCurrentQuestionIndex(currentQuestionIndex+1);}else{console.log('Survey complete, ready for submission');setIsComplete(true);}}};const handleSubmit=async()=>{if(validateResponse()){try{console.log('Submitting survey responses:',responses);const{error}=await supabase.from('survey_responses').update({responses:responses,submitted:true}).eq('id',surveyId);if(error)throw error;console.log('Survey submitted successfully');setIsSubmitted(true);}catch(error){console.error('Error submitting survey:',error);alert('Error submitting survey. Please try again.');}}};if(!survey)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});if(isSubmitted){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Thank You\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Your responses have been recorded.\"})]});}const currentQuestion=survey.questions[currentQuestionIndex];return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Survey\"}),!isComplete?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:currentQuestion.text}),currentQuestion.type==='likert'?currentQuestion.options.map(option=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleResponse(option),style:{backgroundColor:responses[currentQuestionIndex]===option?'lightblue':'white'},children:option},option)):/*#__PURE__*/_jsx(\"textarea\",{value:responses[currentQuestionIndex]||'',onChange:e=>handleResponse(e.target.value)}),errors[currentQuestionIndex]&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:errors[currentQuestionIndex]}),/*#__PURE__*/_jsx(\"button\",{onClick:nextQuestion,children:currentQuestionIndex<survey.questions.length-1?'Next':'Finish'})]}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Thank you for completing the survey. Click submit to record your responses.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmit,children:\"Submit\"})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","createClient","jsx","_jsx","jsxs","_jsxs","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_KEY","console","log","supabase","error","conditions","vignettes","questions","commonQuestions","MIN_COMPLETED_PER_CONDITION","App","survey","setSurvey","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","isComplete","setIsComplete","isSubmitted","setIsSubmitted","surveyId","setSurveyId","errors","setErrors","assignCondition","data","counts","countError","from","select","completedCounts","forEach","condition","filter","c","submitted","length","eligibleConditions","Math","floor","random","Object","keys","reduce","a","b","surveyData","surveyError","insert","single","id","flatMap","vignette","map","q","text","alert","handleResponse","response","prev","validateResponse","currentQuestion","required","nextQuestion","handleSubmit","update","eq","children","className","type","options","option","onClick","style","backgroundColor","value","onChange","e","target","color"],"sources":["/Users/liumeng/Documents/flask_survey/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_KEY;\n\nconsole.log('Supabase URL:', supabaseUrl);\nconsole.log('Supabase Key:', supabaseKey ? 'exists' : 'missing');\n\nlet supabase;\n\nif (supabaseUrl && supabaseKey) {\n  supabase = createClient(supabaseUrl, supabaseKey);\n  console.log('Supabase client initialized');\n} else {\n  console.error('Supabase URL or Key is missing. Please check your environment variables.');\n}\n\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [\n  {\n    'id': 'q1', \n    'text': 'What is your opinion?', \n    'type': 'likert', \n    'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'],\n    'required': true\n  },\n  {\n    'id': 'q2', \n    'text': 'Please explain:', \n    'type': 'text',\n    'required': false\n  }\n];\n\nconst commonQuestions = [\n  {\n    'id': 'common1',\n    'text': 'What is your age?',\n    'type': 'text',\n    'required': true\n  },\n  {\n    'id': 'common2',\n    'text': 'What is your gender?',\n    'type': 'radio',\n    'options': ['Male', 'Female', 'Other', 'Prefer not to say'],\n    'required': true\n  }\n];\n\nconst MIN_COMPLETED_PER_CONDITION = 10;\n\nfunction App() {\n  const [survey, setSurvey] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    if (supabase) {\n      assignCondition();\n    } else {\n      console.error('Supabase client is not initialized. Cannot assign condition.');\n    }\n  }, []);\n\n  const assignCondition = async () => {\n    if (!supabase) {\n      console.error('Supabase client is not initialized. Cannot assign condition.');\n      return;\n    }\n\n    try {\n      const { data: counts, error: countError } = await supabase\n        .from('survey_responses')\n        .select('condition, submitted');\n\n      if (countError) throw countError;\n\n      const completedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n      });\n\n      console.log('Completed surveys per condition:', completedCounts);\n\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n      console.log('Eligible conditions:', eligibleConditions);\n\n      let condition = eligibleConditions.length > 0\n        ? eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)]\n        : Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n\n      console.log('Assigned condition:', condition);\n\n      const { data: surveyData, error: surveyError } = await supabase\n        .from('survey_responses')\n        .insert({ condition: condition, submitted: false })\n        .select()\n        .single();\n\n      if (surveyError) throw surveyError;\n\n      console.log('Created survey response:', surveyData);\n\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        questions: [...commonQuestions, ...vignettes[condition].flatMap(vignette => \n          questions.map(q => ({ ...q, text: `${vignette}\\n\\n${q.text}` }))\n        )]\n      });\n\n      console.log('Survey set up complete');\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n\n  const handleResponse = (response) => {\n    console.log(`Response for question ${currentQuestionIndex}:`, response);\n    setResponses(prev => ({\n      ...prev,\n      [currentQuestionIndex]: response\n    }));\n    setErrors({});\n  };\n\n  const validateResponse = () => {\n    const currentQuestion = survey.questions[currentQuestionIndex];\n    if (currentQuestion.required && !responses[currentQuestionIndex]) {\n      console.log(`Validation failed for question ${currentQuestionIndex}`);\n      setErrors({ [currentQuestionIndex]: 'This question is required' });\n      return false;\n    }\n    return true;\n  };\n\n  const nextQuestion = () => {\n    if (validateResponse()) {\n      if (currentQuestionIndex < survey.questions.length - 1) {\n        console.log(`Moving to question ${currentQuestionIndex + 1}`);\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        console.log('Survey complete, ready for submission');\n        setIsComplete(true);\n      }\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (validateResponse()) {\n      try {\n        console.log('Submitting survey responses:', responses);\n        const { error } = await supabase\n          .from('survey_responses')\n          .update({ \n            responses: responses,\n            submitted: true \n          })\n          .eq('id', surveyId);\n\n        if (error) throw error;\n        console.log('Survey submitted successfully');\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error('Error submitting survey:', error);\n        alert('Error submitting survey. Please try again.');\n      }\n    }\n  };\n\n  if (!survey) return <div>Loading...</div>;\n\n  if (isSubmitted) {\n    return (\n      <div className=\"App\">\n        <h1>Thank You</h1>\n        <p>Your responses have been recorded.</p>\n      </div>\n    );\n  }\n\n  const currentQuestion = survey.questions[currentQuestionIndex];\n\n  return (\n    <div className=\"App\">\n      <h1>Survey</h1>\n      {!isComplete ? (\n        <div>\n          <p>{currentQuestion.text}</p>\n          {currentQuestion.type === 'likert' ? (\n            currentQuestion.options.map(option => (\n              <button \n                key={option} \n                onClick={() => handleResponse(option)}\n                style={{\n                  backgroundColor: responses[currentQuestionIndex] === option ? 'lightblue' : 'white'\n                }}\n              >\n                {option}\n              </button>\n            ))\n          ) : (\n            <textarea \n              value={responses[currentQuestionIndex] || ''}\n              onChange={(e) => handleResponse(e.target.value)} \n            />\n          )}\n          {errors[currentQuestionIndex] && <p style={{ color: 'red' }}>{errors[currentQuestionIndex]}</p>}\n          <button onClick={nextQuestion}>\n            {currentQuestionIndex < survey.questions.length - 1 ? 'Next' : 'Finish'}\n          </button>\n        </div>\n      ) : (\n        <div>\n          <p>Thank you for completing the survey. Click submit to record your responses.</p>\n          <button onClick={handleSubmit}>Submit</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}