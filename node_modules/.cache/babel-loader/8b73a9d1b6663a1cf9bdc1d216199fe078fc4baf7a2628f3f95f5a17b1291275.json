{"ast":null,"code":"var _jsxFileName = \"/Users/liumeng/Documents/flask_survey/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [{\n  'id': 'q1',\n  'text': 'What is your opinion?',\n  'type': 'likert',\n  'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'],\n  'required': true\n}, {\n  'id': 'q2',\n  'text': 'Please explain:',\n  'type': 'text',\n  'required': false\n}];\nconst MIN_COMPLETED_PER_CONDITION = 10;\nconst commonQuestions = [{\n  'id': 'common1',\n  'text': 'What is your age?',\n  'type': 'text',\n  'required': true\n}, {\n  'id': 'common2',\n  'text': 'What is your gender?',\n  'type': 'radio',\n  'options': ['Male', 'Female', 'Other', 'Prefer not to say'],\n  'required': true\n}\n// Add more common questions as needed\n];\nfunction App() {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [currentVignetteIndex, setCurrentVignetteIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [isStarted, setIsStarted] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [showCommonQuestions, setShowCommonQuestions] = useState(true);\n  const [commonResponses, setCommonResponses] = useState({});\n  const assignCondition = async () => {\n    try {\n      // Get counts of started and completed surveys for each condition\n      const {\n        data: counts,\n        error: countError\n      } = await supabase.from('survey_responses').select('condition, submitted');\n      if (countError) throw countError;\n      const completedCounts = {};\n      const startedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n        startedCounts[condition] = counts.filter(c => c.condition === condition).length;\n      });\n      console.log('Completed surveys per condition:', completedCounts);\n      console.log('Started surveys per condition:', startedCounts);\n\n      // Find conditions that haven't met the minimum\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n      let condition;\n      if (eligibleConditions.length > 0) {\n        // Randomly select from eligible conditions\n        condition = eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)];\n        console.log('Selected from eligible conditions:', condition);\n      } else {\n        // If all conditions met minimum, select the one with least completed\n        condition = Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n        console.log('All conditions met minimum. Selected condition with least completed:', condition);\n      }\n\n      // Insert the new survey response\n      const {\n        data: surveyData,\n        error: surveyError\n      } = await supabase.from('survey_responses').insert({\n        condition: condition,\n        submitted: false\n      }).select().single();\n      if (surveyError) throw surveyError;\n      console.log('New survey assigned to condition:', condition);\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n      setIsStarted(true);\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n  const handleResponse = (questionId, response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentVignetteIndex]: {\n        ...prev[currentVignetteIndex],\n        [questionId]: response\n      }\n    }));\n    // Clear error for this question when answered\n    setErrors(prev => ({\n      ...prev,\n      [questionId]: ''\n    }));\n  };\n  const validateResponses = () => {\n    const currentResponses = responses[currentVignetteIndex] || {};\n    let newErrors = {};\n    questions.forEach(question => {\n      if (question.required && !currentResponses[question.id]) {\n        newErrors[question.id] = 'This question is required';\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const nextVignette = () => {\n    if (validateResponses()) {\n      if (currentVignetteIndex < survey.vignettes.length - 1) {\n        setCurrentVignetteIndex(currentVignetteIndex + 1);\n        // Clear the text input for the open-ended question\n        setResponses(prev => ({\n          ...prev,\n          [currentVignetteIndex + 1]: {\n            ...prev[currentVignetteIndex + 1],\n            q2: ''\n          }\n        }));\n      } else {\n        setIsComplete(true);\n      }\n    } else {\n      alert('Please answer all questions before proceeding.');\n    }\n  };\n  const handleCommonResponse = (questionId, response) => {\n    setCommonResponses(prev => ({\n      ...prev,\n      [questionId]: response\n    }));\n    setErrors(prev => ({\n      ...prev,\n      [questionId]: ''\n    }));\n  };\n  const validateCommonResponses = () => {\n    let newErrors = {};\n    commonQuestions.forEach(question => {\n      if (question.required && !commonResponses[question.id]) {\n        newErrors[question.id] = 'This question is required';\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const startSurvey = () => {\n    if (validateCommonResponses()) {\n      setShowCommonQuestions(false);\n      assignCondition();\n    } else {\n      alert('Please answer all required common questions before proceeding.');\n    }\n  };\n  const handleSubmit = async () => {\n    if (validateResponses()) {\n      try {\n        const {\n          error\n        } = await supabase.from('survey_responses').update({\n          responses: responses,\n          common_responses: commonResponses,\n          submitted: true\n        }).eq('id', surveyId);\n        if (error) throw error;\n        console.log('Survey submitted successfully. Condition:', survey.condition);\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error('Error submitting survey:', error);\n        alert('Error submitting survey. Please try again.');\n      }\n    } else {\n      alert('Please answer all required questions before submitting.');\n    }\n  };\n  if (!isStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), showCommonQuestions ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Please answer these common questions first:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), commonQuestions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [question.text, question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'red'\n              },\n              children: \" *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this), question.type === 'radio' ? question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleCommonResponse(question.id, option),\n            style: {\n              backgroundColor: commonResponses[question.id] === option ? 'lightblue' : 'white'\n            },\n            children: option\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: commonResponses[question.id] || '',\n            onChange: e => handleCommonResponse(question.id, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this), errors[question.id] && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: errors[question.id]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 41\n          }, this)]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startSurvey,\n          children: \"Start Survey\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button below to start the main survey.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), !showCommonQuestions && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: assignCondition,\n        children: \"Start Main Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n  if (!survey) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 23\n  }, this);\n  if (isSubmitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Survey Submitted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for completing the survey. Your responses have been recorded.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), !isComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: survey.vignettes[currentVignetteIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), survey.questions.map(question => {\n        var _responses$currentVig2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [question.text, question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'red'\n              },\n              children: \" *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), question.type === 'likert' ? question.options.map(option => {\n            var _responses$currentVig;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleResponse(question.id, option),\n              style: {\n                backgroundColor: ((_responses$currentVig = responses[currentVignetteIndex]) === null || _responses$currentVig === void 0 ? void 0 : _responses$currentVig[question.id]) === option ? 'lightblue' : 'white'\n              },\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: ((_responses$currentVig2 = responses[currentVignetteIndex]) === null || _responses$currentVig2 === void 0 ? void 0 : _responses$currentVig2[question.id]) || '',\n            onChange: e => handleResponse(question.id, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this), errors[question.id] && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: errors[question.id]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 39\n          }, this)]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextVignette,\n        children: currentVignetteIndex < survey.vignettes.length - 1 ? 'Next' : 'Finish'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for completing the survey. Click submit to record your responses.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2qSFZ3cYd+zTj27P/mSGxDBSQpg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","conditions","vignettes","questions","MIN_COMPLETED_PER_CONDITION","commonQuestions","App","_s","survey","setSurvey","currentVignetteIndex","setCurrentVignetteIndex","responses","setResponses","isComplete","setIsComplete","isSubmitted","setIsSubmitted","surveyId","setSurveyId","isStarted","setIsStarted","errors","setErrors","showCommonQuestions","setShowCommonQuestions","commonResponses","setCommonResponses","assignCondition","data","counts","error","countError","from","select","completedCounts","startedCounts","forEach","condition","filter","c","submitted","length","console","log","eligibleConditions","Math","floor","random","Object","keys","reduce","a","b","surveyData","surveyError","insert","single","id","alert","handleResponse","questionId","response","prev","validateResponses","currentResponses","newErrors","question","required","nextVignette","q2","handleCommonResponse","validateCommonResponses","startSurvey","handleSubmit","update","common_responses","eq","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","text","style","color","type","options","option","onClick","backgroundColor","value","onChange","e","target","_responses$currentVig2","_responses$currentVig","_c","$RefreshReg$"],"sources":["/Users/liumeng/Documents/flask_survey/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [\n  {\n    'id': 'q1', \n    'text': 'What is your opinion?', \n    'type': 'likert', \n    'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'],\n    'required': true\n  },\n  {\n    'id': 'q2', \n    'text': 'Please explain:', \n    'type': 'text',\n    'required': false\n  }\n];\n\nconst MIN_COMPLETED_PER_CONDITION = 10;\n\nconst commonQuestions = [\n  {\n    'id': 'common1',\n    'text': 'What is your age?',\n    'type': 'text',\n    'required': true\n  },\n  {\n    'id': 'common2',\n    'text': 'What is your gender?',\n    'type': 'radio',\n    'options': ['Male', 'Female', 'Other', 'Prefer not to say'],\n    'required': true\n  }\n  // Add more common questions as needed\n];\n\nfunction App() {\n  const [survey, setSurvey] = useState(null);\n  const [currentVignetteIndex, setCurrentVignetteIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [isStarted, setIsStarted] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [showCommonQuestions, setShowCommonQuestions] = useState(true);\n  const [commonResponses, setCommonResponses] = useState({});\n\n  const assignCondition = async () => {\n    try {\n      // Get counts of started and completed surveys for each condition\n      const { data: counts, error: countError } = await supabase\n        .from('survey_responses')\n        .select('condition, submitted');\n\n      if (countError) throw countError;\n\n      const completedCounts = {};\n      const startedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n        startedCounts[condition] = counts.filter(c => c.condition === condition).length;\n      });\n\n      console.log('Completed surveys per condition:', completedCounts);\n      console.log('Started surveys per condition:', startedCounts);\n\n      // Find conditions that haven't met the minimum\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n\n      let condition;\n      if (eligibleConditions.length > 0) {\n        // Randomly select from eligible conditions\n        condition = eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)];\n        console.log('Selected from eligible conditions:', condition);\n      } else {\n        // If all conditions met minimum, select the one with least completed\n        condition = Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n        console.log('All conditions met minimum. Selected condition with least completed:', condition);\n      }\n\n      // Insert the new survey response\n      const { data: surveyData, error: surveyError } = await supabase\n        .from('survey_responses')\n        .insert({ condition: condition, submitted: false })\n        .select()\n        .single();\n\n      if (surveyError) throw surveyError;\n\n      console.log('New survey assigned to condition:', condition);\n\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        vignettes: vignettes[condition],\n        questions\n      });\n      setIsStarted(true);\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n\n  const handleResponse = (questionId, response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentVignetteIndex]: { ...prev[currentVignetteIndex], [questionId]: response }\n    }));\n    // Clear error for this question when answered\n    setErrors(prev => ({ ...prev, [questionId]: '' }));\n  };\n\n  const validateResponses = () => {\n    const currentResponses = responses[currentVignetteIndex] || {};\n    let newErrors = {};\n    questions.forEach(question => {\n      if (question.required && !currentResponses[question.id]) {\n        newErrors[question.id] = 'This question is required';\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const nextVignette = () => {\n    if (validateResponses()) {\n      if (currentVignetteIndex < survey.vignettes.length - 1) {\n        setCurrentVignetteIndex(currentVignetteIndex + 1);\n        // Clear the text input for the open-ended question\n        setResponses(prev => ({\n          ...prev,\n          [currentVignetteIndex + 1]: { ...prev[currentVignetteIndex + 1], q2: '' }\n        }));\n      } else {\n        setIsComplete(true);\n      }\n    } else {\n      alert('Please answer all questions before proceeding.');\n    }\n  };\n\n  const handleCommonResponse = (questionId, response) => {\n    setCommonResponses(prev => ({\n      ...prev,\n      [questionId]: response\n    }));\n    setErrors(prev => ({ ...prev, [questionId]: '' }));\n  };\n\n  const validateCommonResponses = () => {\n    let newErrors = {};\n    commonQuestions.forEach(question => {\n      if (question.required && !commonResponses[question.id]) {\n        newErrors[question.id] = 'This question is required';\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const startSurvey = () => {\n    if (validateCommonResponses()) {\n      setShowCommonQuestions(false);\n      assignCondition();\n    } else {\n      alert('Please answer all required common questions before proceeding.');\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (validateResponses()) {\n      try {\n        const { error } = await supabase\n          .from('survey_responses')\n          .update({ \n            responses: responses,\n            common_responses: commonResponses,\n            submitted: true \n          })\n          .eq('id', surveyId);\n\n        if (error) throw error;\n\n        console.log('Survey submitted successfully. Condition:', survey.condition);\n\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error('Error submitting survey:', error);\n        alert('Error submitting survey. Please try again.');\n      }\n    } else {\n      alert('Please answer all required questions before submitting.');\n    }\n  };\n\n  if (!isStarted) {\n    return (\n      <div className=\"App\">\n        <h1>Welcome to the Survey</h1>\n        {showCommonQuestions ? (\n          <div>\n            <h2>Please answer these common questions first:</h2>\n            {commonQuestions.map(question => (\n              <div key={question.id}>\n                <p>\n                  {question.text}\n                  {question.required && <span style={{ color: 'red' }}> *</span>}\n                </p>\n                {question.type === 'radio' ? (\n                  question.options.map(option => (\n                    <button \n                      key={option} \n                      onClick={() => handleCommonResponse(question.id, option)}\n                      style={{\n                        backgroundColor: commonResponses[question.id] === option ? 'lightblue' : 'white'\n                      }}\n                    >\n                      {option}\n                    </button>\n                  ))\n                ) : (\n                  <input \n                    type=\"text\"\n                    value={commonResponses[question.id] || ''}\n                    onChange={(e) => handleCommonResponse(question.id, e.target.value)} \n                  />\n                )}\n                {errors[question.id] && <p style={{ color: 'red' }}>{errors[question.id]}</p>}\n              </div>\n            ))}\n            <button onClick={startSurvey}>Start Survey</button>\n          </div>\n        ) : (\n          <p>Click the button below to start the main survey.</p>\n        )}\n        {!showCommonQuestions && <button onClick={assignCondition}>Start Main Survey</button>}\n      </div>\n    );\n  }\n\n  if (!survey) return <div>Loading...</div>;\n\n  if (isSubmitted) {\n    return (\n      <div className=\"App\">\n        <h1>Survey Submitted</h1>\n        <p>Thank you for completing the survey. Your responses have been recorded.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Survey</h1>\n      {!isComplete ? (\n        <div>\n          <p>{survey.vignettes[currentVignetteIndex]}</p>\n          {survey.questions.map(question => (\n            <div key={question.id}>\n              <p>\n                {question.text}\n                {question.required && <span style={{ color: 'red' }}> *</span>}\n              </p>\n              {question.type === 'likert' ? (\n                question.options.map(option => (\n                  <button \n                    key={option} \n                    onClick={() => handleResponse(question.id, option)}\n                    style={{\n                      backgroundColor: responses[currentVignetteIndex]?.[question.id] === option ? 'lightblue' : 'white'\n                    }}\n                  >\n                    {option}\n                  </button>\n                ))\n              ) : (\n                <textarea \n                  value={responses[currentVignetteIndex]?.[question.id] || ''}\n                  onChange={(e) => handleResponse(question.id, e.target.value)} \n                />\n              )}\n              {errors[question.id] && <p style={{ color: 'red' }}>{errors[question.id]}</p>}\n            </div>\n          ))}\n          <button onClick={nextVignette}>\n            {currentVignetteIndex < survey.vignettes.length - 1 ? 'Next' : 'Finish'}\n          </button>\n        </div>\n      ) : (\n        <div>\n          <p>Thank you for completing the survey. Click submit to record your responses.</p>\n          <button onClick={handleSubmit}>Submit Survey</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}