{"ast":null,"code":"var _jsxFileName = \"/Users/liumeng/Documents/flask_survey/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [{\n  'id': 'q1',\n  'text': 'What is your opinion?',\n  'type': 'likert',\n  'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'],\n  'required': true\n}, {\n  'id': 'q2',\n  'text': 'Please explain:',\n  'type': 'text',\n  'required': false\n}];\nconst commonQuestions = [{\n  'id': 'common1',\n  'text': 'What is your age?',\n  'type': 'text',\n  'required': true\n}, {\n  'id': 'common2',\n  'text': 'What is your gender?',\n  'type': 'radio',\n  'options': ['Male', 'Female', 'Other', 'Prefer not to say'],\n  'required': true\n}];\nconst MIN_COMPLETED_PER_CONDITION = 10;\nfunction App() {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [errors, setErrors] = useState({});\n  useEffect(() => {\n    assignCondition();\n  }, []);\n  const assignCondition = async () => {\n    try {\n      const {\n        data: counts,\n        error: countError\n      } = await supabase.from('survey_responses').select('condition, submitted');\n      if (countError) throw countError;\n      const completedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n      });\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n      let condition = eligibleConditions.length > 0 ? eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)] : Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n      const {\n        data: surveyData,\n        error: surveyError\n      } = await supabase.from('survey_responses').insert({\n        condition: condition,\n        submitted: false\n      }).select().single();\n      if (surveyError) throw surveyError;\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        questions: [...commonQuestions, ...vignettes[condition].flatMap(vignette => questions.map(q => ({\n          ...q,\n          text: `${vignette}\\n\\n${q.text}`\n        })))]\n      });\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n  const handleResponse = response => {\n    setResponses(prev => ({\n      ...prev,\n      [currentQuestionIndex]: response\n    }));\n    setErrors({});\n  };\n  const validateResponse = () => {\n    const currentQuestion = survey.questions[currentQuestionIndex];\n    if (currentQuestion.required && !responses[currentQuestionIndex]) {\n      setErrors({\n        [currentQuestionIndex]: 'This question is required'\n      });\n      return false;\n    }\n    return true;\n  };\n  const nextQuestion = () => {\n    if (validateResponse()) {\n      if (currentQuestionIndex < survey.questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        setIsComplete(true);\n      }\n    }\n  };\n  const handleSubmit = async () => {\n    if (validateResponse()) {\n      try {\n        const {\n          error\n        } = await supabase.from('survey_responses').update({\n          responses: responses,\n          submitted: true\n        }).eq('id', surveyId);\n        if (error) throw error;\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error('Error submitting survey:', error);\n        alert('Error submitting survey. Please try again.');\n      }\n    }\n  };\n  if (!survey) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 23\n  }, this);\n  if (isSubmitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Thank You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your responses have been recorded.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = survey.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), !isComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), currentQuestion.type === 'likert' ? currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleResponse(option),\n        style: {\n          backgroundColor: responses[currentQuestionIndex] === option ? 'lightblue' : 'white'\n        },\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: responses[currentQuestionIndex] || '',\n        onChange: e => handleResponse(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), errors[currentQuestionIndex] && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errors[currentQuestionIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 44\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextQuestion,\n        children: currentQuestionIndex < survey.questions.length - 1 ? 'Next' : 'Finish'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for completing the survey. Click submit to record your responses.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Vg6vOoCCo/JZaG/eWTWfIXWN20k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","conditions","vignettes","questions","commonQuestions","MIN_COMPLETED_PER_CONDITION","App","_s","survey","setSurvey","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","isComplete","setIsComplete","isSubmitted","setIsSubmitted","surveyId","setSurveyId","errors","setErrors","assignCondition","data","counts","error","countError","from","select","completedCounts","forEach","condition","filter","c","submitted","length","eligibleConditions","Math","floor","random","Object","keys","reduce","a","b","surveyData","surveyError","insert","single","id","flatMap","vignette","map","q","text","console","alert","handleResponse","response","prev","validateResponse","currentQuestion","required","nextQuestion","handleSubmit","update","eq","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","options","option","onClick","style","backgroundColor","value","onChange","e","target","color","_c","$RefreshReg$"],"sources":["/Users/liumeng/Documents/flask_survey/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://pkmnyoyvezizgqzycyuz.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBrbW55b3l2ZXppemdxenljeXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgyMjU4MDAsImV4cCI6MjA0MzgwMTgwMH0.le8V0aqC8jouFoUC-3XD9bCWqEPXsqInu9buiwzlpKU';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst conditions = ['A', 'B', 'C'];\nconst vignettes = {\n  'A': ['Vignette A1', 'Vignette A2', 'Vignette A3'],\n  'B': ['Vignette B1', 'Vignette B2', 'Vignette B3'],\n  'C': ['Vignette C1', 'Vignette C2', 'Vignette C3']\n};\nconst questions = [\n  {\n    'id': 'q1', \n    'text': 'What is your opinion?', \n    'type': 'likert', \n    'options': ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'],\n    'required': true\n  },\n  {\n    'id': 'q2', \n    'text': 'Please explain:', \n    'type': 'text',\n    'required': false\n  }\n];\n\nconst commonQuestions = [\n  {\n    'id': 'common1',\n    'text': 'What is your age?',\n    'type': 'text',\n    'required': true\n  },\n  {\n    'id': 'common2',\n    'text': 'What is your gender?',\n    'type': 'radio',\n    'options': ['Male', 'Female', 'Other', 'Prefer not to say'],\n    'required': true\n  }\n];\n\nconst MIN_COMPLETED_PER_CONDITION = 10;\n\nfunction App() {\n  const [survey, setSurvey] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [surveyId, setSurveyId] = useState(null);\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    assignCondition();\n  }, []);\n\n  const assignCondition = async () => {\n    try {\n      const { data: counts, error: countError } = await supabase\n        .from('survey_responses')\n        .select('condition, submitted');\n\n      if (countError) throw countError;\n\n      const completedCounts = {};\n      conditions.forEach(condition => {\n        completedCounts[condition] = counts.filter(c => c.condition === condition && c.submitted).length;\n      });\n\n      const eligibleConditions = conditions.filter(condition => completedCounts[condition] < MIN_COMPLETED_PER_CONDITION);\n      let condition = eligibleConditions.length > 0\n        ? eligibleConditions[Math.floor(Math.random() * eligibleConditions.length)]\n        : Object.keys(completedCounts).reduce((a, b) => completedCounts[a] <= completedCounts[b] ? a : b);\n\n      const { data: surveyData, error: surveyError } = await supabase\n        .from('survey_responses')\n        .insert({ condition: condition, submitted: false })\n        .select()\n        .single();\n\n      if (surveyError) throw surveyError;\n\n      setSurveyId(surveyData.id);\n      setSurvey({\n        condition,\n        questions: [...commonQuestions, ...vignettes[condition].flatMap(vignette => \n          questions.map(q => ({ ...q, text: `${vignette}\\n\\n${q.text}` }))\n        )]\n      });\n    } catch (error) {\n      console.error('Error assigning condition:', error);\n      alert('Error starting survey. Please try again.');\n    }\n  };\n\n  const handleResponse = (response) => {\n    setResponses(prev => ({\n      ...prev,\n      [currentQuestionIndex]: response\n    }));\n    setErrors({});\n  };\n\n  const validateResponse = () => {\n    const currentQuestion = survey.questions[currentQuestionIndex];\n    if (currentQuestion.required && !responses[currentQuestionIndex]) {\n      setErrors({ [currentQuestionIndex]: 'This question is required' });\n      return false;\n    }\n    return true;\n  };\n\n  const nextQuestion = () => {\n    if (validateResponse()) {\n      if (currentQuestionIndex < survey.questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        setIsComplete(true);\n      }\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (validateResponse()) {\n      try {\n        const { error } = await supabase\n          .from('survey_responses')\n          .update({ \n            responses: responses,\n            submitted: true \n          })\n          .eq('id', surveyId);\n\n        if (error) throw error;\n        setIsSubmitted(true);\n      } catch (error) {\n        console.error('Error submitting survey:', error);\n        alert('Error submitting survey. Please try again.');\n      }\n    }\n  };\n\n  if (!survey) return <div>Loading...</div>;\n\n  if (isSubmitted) {\n    return (\n      <div className=\"App\">\n        <h1>Thank You</h1>\n        <p>Your responses have been recorded.</p>\n      </div>\n    );\n  }\n\n  const currentQuestion = survey.questions[currentQuestionIndex];\n\n  return (\n    <div className=\"App\">\n      <h1>Survey</h1>\n      {!isComplete ? (\n        <div>\n          <p>{currentQuestion.text}</p>\n          {currentQuestion.type === 'likert' ? (\n            currentQuestion.options.map(option => (\n              <button \n                key={option} \n                onClick={() => handleResponse(option)}\n                style={{\n                  backgroundColor: responses[currentQuestionIndex] === option ? 'lightblue' : 'white'\n                }}\n              >\n                {option}\n              </button>\n            ))\n          ) : (\n            <textarea \n              value={responses[currentQuestionIndex] || ''}\n              onChange={(e) => handleResponse(e.target.value)} \n            />\n          )}\n          {errors[currentQuestionIndex] && <p style={{ color: 'red' }}>{errors[currentQuestionIndex]}</p>}\n          <button onClick={nextQuestion}>\n            {currentQuestionIndex < survey.questions.length - 1 ? 'Next' : 'Finish'}\n          </button>\n        </div>\n      ) : (\n        <div>\n          <p>Thank you for completing the survey. Click submit to record your responses.</p>\n          <button onClick={handleSubmit}>Submit</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}